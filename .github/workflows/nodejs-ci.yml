name: Studiographene NodeJs CI

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        description: "A GitHub PersonalAccessToken used to access GitHub package regististy. NPM_TOKEN is also passed as Docker build --build-arg. If not defined default GITHUB_TOKEN is used."
        required: false
      PULSE_HAMC_SECRET:
        description: "A secret key to generate HMAC for Pulse API. This is used to send test coverage report to Pulse."
        required: false
    inputs:
      PULSE_URL:
        type: string
        default: "https://a0lrn1xwl4.execute-api.eu-west-1.amazonaws.com"
      excluded_jobs:
        type: string
        default: ""
      package_manager:
        type: string
        default: "npm"
      build_command:
        type: string
        default: "npm run build"
      run_dev_test:
        description: "A boolen value to enable Developer tests (Unit/Integration/etc.,). Set value as `true` if tests are available in your repo code"
        type: boolean
        required: false
        default: false
      dev_test_branch:
        description: "Developer-provided branch names to run the tests"
        type: string
        required: false
        default: qa
      docker_build_command:
        type: string
        required: false
        default: ""
      docker_build_image_id:
        description: "Docker image ID as mentioned in docker_build_command"
        type: string
        default: "local:latest"
      container_scanners:
        description: "comma-separated list of what security issues to detect (vuln,secret,config). Default = vuln"
        type: string
        required: false
        default: vuln
      container_scan_skip_dirs:
        description: "Comma separated list of directories to skip scanning"
        type: string
        required: false
      lint_command:
        type: string
        default: "npm run lint"
      allowedLicenses:
        type: string
        required: false
        description: "`allowedLicenses` input is deprecated, and not used anymore. You can set allowed licenses using `ALLOWED_LICENSES` in GitHub action variables in UI."
      semgrep_options:
        type: string
        default: ""
      security_scan_before_step_command:
        type: string
        default: ""
      security_scan_after_step_command:
        type: string
        default: ""
      pr_agent_before_step_command:
        type: string
        default: ""
      pr_agent_after_step_command:
        type: string
        default: ""
      caching_before_step_command:
        type: string
        default: ""
      caching_after_step_command:
        type: string
        default: ""
      technology_based_scans_before_step_command:
        type: string
        default: ""
      technology_based_scans_after_step_command:
        type: string
        default: ""
      container_scan_before_step_command:
        description: "Command to execute at the start of the container scan"
        type: string
        default: ""
      container_scan_after_step_command:
        description: "Command to execute at the end of the container scan"
        type: string
        default: ""
      send_test_coverage_report_to_pulse:
        description: "A boolean value to enable sending test coverage report to Pulse"
        type: boolean
        required: false
        default: false
      test_coverage_report_directory:
        description: "Location of the test coverage report"
        type: string
        required: false
        default: "coverage"

jobs:
  caching:
    name: cache_module
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-20-alpine
    outputs:
      cache-key: ${{ steps.set-cache-key.outputs.cache-key }}  
      cache-restore-key: ${{ steps.set-cache-restore-key.outputs.cache-restore-key }}
    steps:
      - name: Testing
        run: |
          echo "inputs.send_test_coverage_report_to_pulse=${{ inputs.send_test_coverage_report_to_pulse }} "
          echo "inputs.run_dev_test : ${{ inputs.run_dev_test }} "
          echo "github.event.pull_request.base.ref : ${{ github.event.pull_request.base.ref }} "
          echo "github.event.pull_request.merged : ${{ github.event.pull_request.merged }} "
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: before step
        if: ${{ inputs.caching_before_step_command != '' }}
        run: |
          ${{ inputs.caching_before_step_command}}          
      - name: Set cache key
        id: set-cache-key
        if: |
          inputs.package_manager == 'npm' || 
          inputs.package_manager == 'yarn' || 
          inputs.package_manager == 'pnpm'  
        run: |
          echo "cache-key=${{ runner.os }}-${{ inputs.package_manager }}-${{ hashFiles('**/package-lock.json', '**/package.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}" >> "$GITHUB_OUTPUT"  
      - name: Set cache restore key
        id: set-cache-restore-key
        if: |
          inputs.package_manager == 'npm' || 
          inputs.package_manager == 'yarn' || 
          inputs.package_manager == 'pnpm'  
        run: |
          echo "cache-restore-key=${{ runner.os }}-${{ inputs.package_manager }}-${{ hashFiles('**/package-lock.json', '**/package.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}" >> "$GITHUB_OUTPUT"  
      - name: Cache node modules
        id: cache-node-modules
        if: |
          inputs.package_manager == 'npm' || 
          inputs.package_manager == 'yarn' || 
          inputs.package_manager == 'pnpm'  
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.set-cache-key.outputs.cache-key }} 
          restore-keys: ${{ steps.set-cache-restore-key.outputs.cache-restore-key }}
      - name: List the state of node modules
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        continue-on-error: true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
        run: ${{ inputs.package_manager }} list         
      - name: Install dependencies
        run: |
          ${{ inputs.package_manager }} install
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Convert lockfile version > 2 in case of npm
        if: inputs.package_manager == 'npm'
        run: |
          ${{ inputs.package_manager }} install --lockfile-version 2 --package-lock-only
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}          
      - name: Upload package-lock
        uses: actions/upload-artifact@v4
        if: inputs.package_manager == 'npm'
        with:
          name: lockFile
          path: package-lock.json
      - name: Upload yarn-lock
        uses: actions/upload-artifact@v4
        if: inputs.package_manager == 'yarn'
        with:
          name: lockFile
          path: yarn.lock
      - name: Upload pnpm-lock
        uses: actions/upload-artifact@v4
        if: inputs.package_manager == 'pnpm'
        with:
          name: lockFile
          path: pnpm-lock.yaml
      - name: after step
        if: ${{ inputs.caching_after_step_command != '' }}
        run: |
          ${{ inputs.caching_after_step_command}}

  security_scans:
    name: security_scans
    needs: caching
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') }}
    uses: studiographene/github-action-workflows/.github/workflows/security-scans.yml@master
    secrets: inherit
    with:
      security_scan_before_step_command: ${{ inputs.security_scan_before_step_command }}
      security_scan_after_step_command: ${{ inputs.security_scan_after_step_command }}
      excluded_jobs: ${{ inputs.excluded_jobs }}
      semgrep_options: ${{ inputs.semgrep_options }}

  technology_based_scans:
    needs: caching
    name: technology_based_scans
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-20-buster-slim-v5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}                
      - name: Technology based scans before step
        if: ${{ inputs.technology_based_scans_before_step_command != '' }}
        run: |
          ${{ inputs.technology_based_scans_before_step_command}}
      - name: Cache node modules
        id: cache-node-modules
        if: |
          inputs.package_manager == 'npm' || 
          inputs.package_manager == 'yarn' || 
          inputs.package_manager == 'pnpm'  
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.caching.outputs.cache-restore-key }}
          restore-keys: ${{ needs.caching.outputs.cache-restore-key }}
      - name: Install dependencies
        run: |
          ${{ inputs.package_manager }} install
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Eslint scan
        if: ${{ !cancelled() && !contains( inputs.excluded_jobs, 'lint' ) && !(github.event.pull_request.merged == true ) }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          ${{ inputs.lint_command }}
      - name: Build project
        env:
          NPM_TOKEN: ${{ (secrets.NPM_TOKEN != '' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN) && !(github.event.pull_request.merged == true ) }}
        if: ${{ !cancelled() && !contains( inputs.excluded_jobs, 'build' )  }}
        run: |
          ${{ inputs.build_command }}
      - name: Developer Tests
        id: developer_tests
        if: ${{ always() && inputs.run_dev_test && contains(inputs.dev_test_branch, github.event.pull_request.base.ref) }}
        run: |
          ${{ inputs.package_manager }} run test
      - name: Developer Test Coverage Threshold Check
        working-directory: ${{ github.workspace }}
        if: ${{  !cancelled() && contains('failure,success', steps.developer_tests.outcome) }}
        env:
          COVERAGE_THRESHOLD: ${{ vars.COVERAGE_THRESHOLD }}
          COVERAGE_DIRECTORY: ${{ inputs.test_coverage_report_directory }}

        run: |
          node /root/generate-dev-test-coverage-report.cjs
      - name: Developer Test Coverage Report
        if: ${{  !cancelled() && contains('failure,success', steps.developer_tests.outcome) && !(github.event.pull_request.merged == true ) }}
        uses: studiographene/add-pr-comment@main
        with:
          message-id: test-coverage-report
          message-path: test-coverage-report.md

      - name: Composing and Sending Test Coverage Report to Pulse
        id: compose_pulse_report
        if: ${{ always() && inputs.send_test_coverage_report_to_pulse && inputs.run_dev_test && github.event.pull_request.merged == true && github.event.pull_request.base.ref == inputs.run_dev_test}}
        working-directory: ${{ github.workspace }}
        env:
          secret: ${{ secrets.PULSE_HAMC_SECRET }}
          url: ${{ inputs.PULSE_URL}}/github/test-coverage
          coverage_file_path: ${{inputs.test_coverage_report_directory}}/coverage-summary.json
        run: |
          current_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          coverage=$(jq -c '.total' "$coverage_file_path")

          json_payload=$(jq -n \
          --arg organisationId ${{ github.repository_owner_id }} \
          --arg repoId ${{ github.repository_id }} \
          --arg createdAt $current_date \
          --argjson coverage $coverage \
          '{ organisationId: $organisationId, repoId: $repoId, createdAt: $createdAt,  coverage: { "total": $coverage } }')

          hmac=$(echo -n "$json_payload" | tr -d ' \n' | openssl dgst -sha256 -hmac $secret | awk '{print $2}')

          echo "GENERATED HMAC: " $hmac
          curl -X POST $url -H "Content-Type: application/json" -H "X-Signature: $hmac" -d "$json_payload"

      - name: Technology based scans after step
        if: ${{ inputs.technology_based_scans_after_step_command != '' }}
        run: |
          ${{ inputs.technology_based_scans_after_step_command}}

  container_scan:
    name: container_scan
    if: ${{ !contains( inputs.excluded_jobs, 'docker' ) && !contains( inputs.excluded_jobs, 'container_scan' ) && !(contains(fromJSON('["dependabot[bot]", "github-actions[bot]"]'), github.actor)) && !(github.event.pull_request.merged == true) }}
    uses: studiographene/github-action-workflows/.github/workflows/trivy-container-scan.yml@master
    secrets: inherit
    with:
      docker_build_command: ${{ inputs.docker_build_command }}
      docker_build_image_id: ${{ inputs.docker_build_image_id }}
      container_scanners: ${{ inputs.container_scanners }}
      container_scan_skip_dirs: ${{ inputs.container_scan_skip_dirs }}
      before_step_command: ${{ inputs.container_scan_before_step_command }}
      after_step_command: ${{ inputs.container_scan_after_step_command}}

  pr_agent:
    name: pr_agent
    if: ${{ !contains( inputs.excluded_jobs, 'pr_agent' ) && !(contains(fromJSON('["dependabot[bot]", "github-actions[bot]"]'), github.actor)) && !(github.event.pull_request.merged == true  || github.event_name == 'issue_comment') }}
    uses: studiographene/github-action-workflows/.github/workflows/codium-pr-agent.yml@master
    secrets: inherit
    with:
      before_step_command: ${{ inputs.pr_agent_before_step_command }}
      after_step_command: ${{ inputs.pr_agent_after_step_command}}

