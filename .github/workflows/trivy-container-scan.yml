name: Trivy Container Scan
on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        description: "A GitHub PersonalAccessToken used to access NPM package regististy. NPM_TOKEN is passed as Docker build --build-arg. If not defined GITHUB_TOKEN is used."
        required: false

    inputs:
      action_runner_container_image:
        description: "Action runner container image. Default = public.ecr.aws/studiographene/ci:node-20-alpine"
        type: string
        default: public.ecr.aws/studiographene/ci:node-20-alpine
      docker_build_command:
        type: string
        required: false
      docker_build_image_id:
        description: "Docker image ID as mentioned in docker_build_command"
        type: string
        default: "local:latest"
      CONTAINER_SCANNERS:
        description: "comma-separated list of what security issues to detect (vuln,secret,config). Default = vuln"
        type: string
        required: false
        default: vuln
      CONTAINER_SCAN_SKIP_DIRS:
        description: "Comma separated list of directories to skip scanning"
        type: string
        required: false
      before_step_command:
        description: "Command to execute at the start of the job"
        type: string
        default: ""
      after_step_command:
        description: "Command to execute at the end of the job"
        type: string
        default: ""

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  container_scan:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.action_runner_container_image }}
    steps:
      - name: Before Step
        if: ${{ inputs.before_step_command != '' }}
        run: |
          ${{ inputs.before_step_command}}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.REF }}

      - name: Docker Build
        id: docker_build
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          [[ -n $NPM_TOKEN ]] && FINAL_NPM_TOKEN=$NPM_TOKEN || FINAL_NPM_TOKEN=${{ secrets.GITHUB_TOKEN }}
          [[ -n ${{ inputs.docker_build_command }} ]] && ${{ inputs.docker_build_command }} || docker build --build-arg NPM_TOKEN=$FINAL_NPM_TOKEN -t local:latest .

      - name: Creating Trivy report PR comment template file
        run: |
          cat <<EOF >> prcomment.tpl 
          | Package | Vulnerability | Severity | Status | Installed Version | Fixed Version | Title | \n
          | ------- | ------------- | -------- | ------ | ----------------- | ------------- | ----- |
          {{- range .}}
          {{- range .Vulnerabilities}}
          \n | {{ .PkgName | html }} | {{ .VulnerabilityID | html }} | {{ .Severity | html }} | {{ .Status | html }} | {{ .InstalledVersion | html }} | {{ .FixedVersion | html }} | {{ .Title | html }} |
          {{ end }}
          {{- end }}
          EOF

      - name: Trivy container vulnerability scan
        id: container_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.docker_build_image_id }}
          format: "template"
          template: "@prcomment.tpl"
          output: "trivyreport.json"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          scanners: ${{ inputs.CONTAINER_SCANNERS }}
          skip-dirs: ${{ inputs.CONTAINER_SCAN_SKIP_DIRS }}

      - name: Create container vulnerability report
        if: ${{ always() && contains('success,failure', steps.container_scan.outcome) && github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo -n "{\"body\":\"# Trivy Container Scan\n" > container_scan_prcomment.json
          if [ ${{ steps.container_scan.outcome }} == "failure" ]
          then
            echo -n "### :warning: Vulnerabilities detected\nThe following vulnerabilities of HIGH or CRITICAL severity has been detected in the code. Please resolve these before merging the pull request.\n\n" >> container_scan_prcomment.json
            cat trivyreport.json >> container_scan_prcomment.json
          elif [ ${{ steps.container_scan.outcome }} == "success" ]
          then
            echo -n "### :rainbow: No vulnerabilities of HIGH or CRITICAL severity has been detected\"}" >> container_scan_prcomment.json
          fi
          echo "\"}" >> container_scan_prcomment.json

      - name: PR comment the container scan report
        if: ${{ always() && contains('success,failure', steps.container_scan.outcome) && github.event_name == 'pull_request' }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: trivy_container_scan
          message-path: container_scan_prcomment.json

      - name: After Step
        if: ${{ inputs.after_step_command != '' }}
        run: |
          ${{ inputs.after_step_command}}
