name: Security scans

on:
  workflow_call:
    inputs:
      excluded_jobs:
        type: string
        default: ""
      semgrep_options:
        type: string
        default: ""
      security_scan_before_step_command:
        type: string
        default: ""
      security_scan_after_step_command:
        type: string
        default: ""

jobs:
  security-scans:
    name: security scans
    runs-on: ubuntu-latest
    permissions: write-all
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-20-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.REF }}

      - name: Security scans before step
        if: ${{ inputs.security_scan_before_step_command != '' }}
        run: |
          ${{ inputs.security_scan_before_step_command}}
      - name: SAST Scan using Semgrep
        if: ${{ always() && !contains(inputs.excluded_jobs, 'sast')  }}

        id: generate_sast_report
        run: |
          set +e
          cp /root/configs/semgrep/rules/eslint.v1.3.32.yml eslint.v1.3.32.yml
          semgrep scan --error --config  "p/default" --config eslint.v1.3.32.yml --json ${{ inputs.semgrep_options }} > semgrep.json
          SEMGREP_EXIT_CODE=$?
          set -e
          if [ $SEMGREP_EXIT_CODE -ne 0 ]; then
            echo "## Semgrep SAST Scan Report" > sast_report.md
            echo "### Below are the vulnerabilities found in the code. Please resolve these before merging the pull request: " >> sast_report.md
            echo "| Rule Id | Severity |  Message | Line Number | File Name |" >> sast_report.md
            echo "| --- | --- | --- | --- | --- |" >> sast_report.md
            echo 'const fs = require("fs");
            const semgrepFile = fs.readFileSync("semgrep.json", "utf8");
            const semgrepData = JSON.parse(semgrepFile);
            for (const result of semgrepData.results) {
              let ruleId = result.check_id.replaceAll(",",";");
              ruleId = ruleId.replaceAll("\n","");
              let message = result.extra.message.replaceAll(",", ";");
              message = message.replaceAll("\n","");
              const severity = result.extra.severity;
              const lineNumber = result.start.line;
              const fileName = result.path;
              console.log("| " + ruleId + " | "  + severity + "|" + message +" | " + lineNumber + " | " + fileName + " |");
            }' > sast_report_format.cjs
            node sast_report_format.cjs >> sast_report.md
          else
            echo "## Semgrep SAST Scan Report" > sast_report.md
            echo "### :tada:! There are no vulnerabilities found in the code." >> sast_report.md
          fi
          exit $SEMGREP_EXIT_CODE
      - uses: mshick/add-pr-comment@v2
        if: ${{ always() && !contains(inputs.excluded_jobs, 'sast')  }}
        with:
          message-id: sast-scan
          message-path: sast_report.md

      - name: Gitleaks scan
        if: ${{ always() && !contains(inputs.excluded_jobs, 'gitleaks')  }}
        uses: gitleaks/gitleaks-action@v1.6.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for composer.lock or composer.json
        if: ${{ always() && !(contains(fromJSON('["licenseScan", "dependency_scan"]'), inputs.excluded_jobs)) }}
        id: check_files
        run: |
          if [ -f composer.lock ] || [ -f composer.json ]; then
            echo "Files exist"
            echo "SKIP_DOWNLOAD_LOCKFILE=true" >> $GITHUB_OUTPUT
          else
            echo "Files do not exist"
            echo "SKIP_DOWNLOAD_LOCKFILE=false" >> $GITHUB_OUTPUT
          fi
      - name: Download LockFile Artifact
        if: always() && steps.check_files.outputs.SKIP_DOWNLOAD_LOCKFILE != 'true'
        uses: actions/download-artifact@v4
        with:
          name: lockFile
          path: .
      - name: Generate SBOM using CycloneDX
        if: always ()
        run: |
          cdxgen --no-recurse -o bom.xml -p
        env:
          FETCH_LICENSE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CDXGEN_DEBUG_MODE: debug

      - name: License Scan
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          PROJECT_OWNER: ${{ github.repository_owner }}
          DEFAULT_ALLOWED_LICENSES: |
            Apache-2.0
            MIT
            MIT-0
            BSD-2-Clause
            BSD-3-Clause
            ISC
            0BSD
            CC-BY-4.0
            BlueOak-1.0.0
            No-Licence
            Unlicense
            Python-2.0
            CC-BY-3.0
            CC0-1.0
            MPL-2.0
            CC-BY-4.0
            Unicode-DFS-2016
        if: ${{ always() && !contains( inputs.excluded_jobs, 'licenseScan' ) }}
        run: |
          cat > allowedLicenses.txt <<EOF
              $DEFAULT_ALLOWED_LICENSES
          EOF
          cat >> allowedLicenses.txt <<EOF
              ${{ vars.ALLOWED_LICENSES }}
          EOF
          /root/executables/ci-utility check --sbom bom.xml --allowedLicences allowedLicenses.txt

      - name: Dependency Scan using Google OSV
        id: dependency_scan
        if: ${{ always() && !contains( inputs.excluded_jobs, 'dependency_scan' ) }}
        run: |
          cat >> /root/configs/osv/config.toml <<EOF
              ${{ vars.OSV_SUPPRESSIONS }}
          EOF
          set +e
          osv-scanner --format markdown --config=/root/configs/osv/config.toml --sbom=bom.xml > osv_raw_report.md 
          OSV_EXIT_CODE=$?
          set -e
          echo "## OSV Dependency Scan Report" >> osv_report.md
          if [ -s "/root/configs/osv/config.toml" ]; then
            echo "### The following vulnerabilities have been suppressed using Action variable OSV_SUPPRESSIONS:" >> osv_report.md
            grep -E 'id =|reason =' /root/configs/osv/config.toml >> osv_report.md
          fi
          if [ $OSV_EXIT_CODE -ne 0 ]; then
            echo "### The following vulnerabilities have been detected in the packages. Please resolve these before merging the pull request:" >> osv_report.md
            cat osv_raw_report.md >> osv_report.md
          else
            echo "### :tada:! There are no vulnerabilities found in the packages." >> osv_report.md
            cat osv_raw_report.md >> osv_report.md
          fi
          exit $OSV_EXIT_CODE

      - name: Comment Dependency scan report on PR
        if: ${{ always() && contains('success,failure', steps.dependency_scan.outcome) }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: dependency_scan
          message-path: osv_report.md
      - name: Security scans after step
        if: ${{ inputs.security_scan_after_step_command != '' }}
        run: |
          ${{ inputs.security_scan_after_step_command }}
