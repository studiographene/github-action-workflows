name: Security scans

on:
  workflow_call:
    inputs:
      job_runner:
        description: "GitHub action Jobs runtime. For example GitHub default runtimes like ubuntu-latest or you custome runtime. Default = ubuntu-latest"
        type: string
        required: false
        default: "ubuntu-latest"
      excluded_jobs:
        type: string
        default: ""
      semgrep_options:
        type: string
        default: ""
      security_scan_before_step_command:
        type: string
        default: ""
      security_scan_after_step_command:
        type: string
        default: ""

jobs:
  SAST:
    name: sast
    runs-on: ${{ inputs.job_runner }}
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') && !contains(inputs.excluded_jobs, 'sast') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-22-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: SAST before step
        if: ${{ inputs.security_scan_before_step_command != '' }}
        run: |
          ${{ inputs.security_scan_before_step_command}}
      - name: SAST Scan using Semgrep
        id: generate_sast_report
        run: |
          set +e
          cp /root/configs/semgrep/rules/eslint.v1.3.32.yml eslint.v1.3.32.yml
          semgrep scan --error --config  "p/default" --config eslint.v1.3.32.yml --json ${{ inputs.semgrep_options }} > semgrep.json
          SEMGREP_EXIT_CODE=$?
          set -e
          if [ $SEMGREP_EXIT_CODE -ne 0 ]; then
            echo "## Semgrep SAST Scan Report" > sast_report.md
            echo "### Below are the vulnerabilities found in the code. Please resolve these before merging the pull request: " >> sast_report.md
            echo "| Rule Id | Severity |  Message | Line Number | File Name |" >> sast_report.md
            echo "| --- | --- | --- | --- | --- |" >> sast_report.md
            echo 'const fs = require("fs");
            const semgrepFile = fs.readFileSync("semgrep.json", "utf8");
            const semgrepData = JSON.parse(semgrepFile);
            for (const result of semgrepData.results) {
              let ruleId = result.check_id.replaceAll(",",";");
              ruleId = ruleId.replaceAll("\n","");
              let message = result.extra.message.replaceAll(",", ";");
              message = message.replaceAll("\n","");
              const severity = result.extra.severity;
              const lineNumber = result.start.line;
              const fileName = result.path;
              console.log("| " + ruleId + " | "  + severity + "|" + message +" | " + lineNumber + " | " + fileName + " |");
            }' > sast_report_format.cjs
            node sast_report_format.cjs >> sast_report.md
          else
            echo "## Semgrep SAST Scan Report" > sast_report.md
            echo "### :tada:! There are no vulnerabilities found in the code." >> sast_report.md
          fi
          if [ $SEMGREP_EXIT_CODE != 0 ]; then
            echo "::error::Vulnerabilities found! Find the scan report in the PR comment if this scan was triggered by PR"
            exit 1
          elif [ $SEMGREP_EXIT_CODE == 0 ]; then
            exit 0
          fi
      - name: Comment SAST report on PR
        if: ${{ !cancelled() }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: sast-scan
          message-path: sast_report.md

  gitleaks:
    name: gitleaks
    runs-on: ${{ inputs.job_runner }}
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') && !contains(inputs.excluded_jobs, 'gitleaks') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-22-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # - name: SAST before step
      #   if: ${{ inputs.security_scan_before_step_command != '' }}
      #   run: |
      #     ${{ inputs.security_scan_before_step_command}}

      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v1.6.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_sbom:
    name: generate_sbom
    runs-on: ${{ inputs.job_runner }}
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') && !contains(inputs.excluded_jobs, 'dependency_scan') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-22-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Check for composer.lock or composer.json
        id: check_files
        run: |
          if [ -f composer.lock ] || [ -f composer.json ]; then
            echo "Files exist"
            echo "SKIP_DOWNLOAD_LOCKFILE=true" >> $GITHUB_OUTPUT
          else
            echo "Files do not exist"
            echo "SKIP_DOWNLOAD_LOCKFILE=false" >> $GITHUB_OUTPUT
          fi
      - name: Download package_lockFile Artifact
        if: ${{ !cancelled() && steps.check_files.outputs.SKIP_DOWNLOAD_LOCKFILE != 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: package_lockFile
          path: .
      - name: Generate SBOM using CycloneDX
        if: always ()
        run: |
          cdxgen --version
          npm install -g @cyclonedx/cdxgen-plugins-bin
          cdxgen --no-recurse -o bom.xml -p --debug
          ls -al
        env:
          FETCH_LICENSE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CDXGEN_DEBUG_MODE: debug
      
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: bom.xml

  license_scan:
    name: license_scan
    runs-on: ${{ inputs.job_runner }}
    needs: generate_sbom
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') && !contains(inputs.excluded_jobs, 'license_scan') }}
    container:
      image: public.ecr.aws/studiographene/ci:node-22-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Download SBOM Artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .

      - name: License Scan
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          PROJECT_OWNER: ${{ github.repository_owner }}
          DEFAULT_ALLOWED_LICENSES: |
            Apache-2.0
            MIT
            MIT-0
            BSD-2-Clause
            BSD-3-Clause
            ISC
            0BSD
            CC-BY-4.0
            BlueOak-1.0.0
            No-Licence
            Unlicense
            Python-2.0
            CC-BY-3.0
            CC0-1.0
            MPL-2.0
            CC-BY-4.0
            Unicode-DFS-2016
        if: ${{ !cancelled() && !contains( inputs.excluded_jobs, 'license_scan' ) }}
        run: |
          cat > allowedLicenses.txt <<EOF
              $DEFAULT_ALLOWED_LICENSES
          EOF
          cat >> allowedLicenses.txt <<EOF
              ${{ vars.ALLOWED_LICENSES }}
          EOF
          /root/executables/ci-utility check --sbom bom.xml --allowedLicences allowedLicenses.txt

  dependency_scan:
    needs: generate_sbom
    name: dependency_scan
    runs-on: ${{ inputs.job_runner }}
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: write
      security-events: write
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') && !contains( inputs.excluded_jobs, 'dependency_scan' ) }}
    container:
      image: public.ecr.aws/studiographene/ci:node-22-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Download SBOM Artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: .
      - name: Dependency Scan using Google OSV
        id: dependency_scan
        run: |
          cat >> dep_scan_suppression_config.toml <<EOF
              ${{ vars.OSV_SUPPRESSIONS }}
          EOF
          set +e
          osv-scanner --format markdown --config=./dep_scan_suppression_config.toml --sbom=bom.xml > osv_raw_report.md
          # JSON report is generated to segregate the vulnerabilities based on the CVSS score
          osv-scanner --format json --config=./dep_scan_suppression_config.toml --sbom=bom.xml > osv_raw_report.json
          echo "OSV_EXIT_CODE=$?" >> $GITHUB_OUTPUT
          set -e
      - name: Generate Dependency Scan Report
        id: generate_dependency_scan_report
        env:
          OSV_EXIT_CODE: ${{ steps.dependency_scan.outputs.OSV_EXIT_CODE }}
        run: |
          if [ $OSV_EXIT_CODE -ne 0 ]; then
            echo "Executing IF statement (vulnerabilities found)"
            SEVERITY_COUNTS=$(jq -r ' [.results[].packages[]? | select(.groups != null) | .groups[]?.max_severity | tonumber ]
              | [
                  (map(select(. < 4)) | length),
                  (map(select(. >= 4 and . <= 7)) | length),
                  (map(select(. > 7)) | length)
                ] 
              | @sh
            ' osv_raw_report.json)
            OSV_SEVERITY_LOW=$(echo $SEVERITY_COUNTS | cut -d' ' -f1)
            OSV_SEVERITY_MEDIUM=$(echo $SEVERITY_COUNTS | cut -d' ' -f2)
            OSV_SEVERITY_HIGH=$(echo $SEVERITY_COUNTS | cut -d' ' -f3)
            echo "OSV_SEVERITY_LOW=$low" >> $GITHUB_OUTPUT
            echo "OSV_SEVERITY_MEDIUM=$medium" >> $GITHUB_OUTPUT
            echo "OSV_SEVERITY_HIGH=$high" >> $GITHUB_OUTPUT
            echo "### The following vulnerabilities have been detected in the packages" >> osv_report.md
            echo "> LOW SEVERITY COUNT: $OSV_SEVERITY_LOW" >> osv_report.md
            echo "MEDIUM SEVERITY COUNT: $OSV_SEVERITY_MEDIUM" >> osv_report.md
            echo "HIGH SEVERITY COUNT: $OSV_SEVERITY_HIGH" >> osv_report.md
            echo "### ${OSV_SEVERITY_HIGH} HIGH SEVERITY Packaged found. Please resolve these before merging the pull request:<br>" >> osv_report.md
            echo "LOW SEVERITY COUNT: $OSV_SEVERITY_LOW"
            echo "MEDIUM SEVERITY COUNT: $OSV_SEVERITY_MEDIUM"
            echo "HIGH SEVERITY COUNT: $OSV_SEVERITY_HIGH"
            cat osv_raw_report.md >> osv_report.md
          else
            echo "### :tada:! There are no vulnerabilities found in the packages." >> osv_report.md
            cat osv_raw_report.md >> osv_report.md
          fi
          echo "> LOW SEVERITY COUNT: $OSV_SEVERITY_LOW"
          echo "> MEDIUM SEVERITY COUNT: $OSV_SEVERITY_MEDIUM"
          echo "> HIGH SEVERITY COUNT: $OSV_SEVERITY_HIGH"
          cat osv_report.md
      - name: Comment Dependency scan report on PR
        if: ${{ !cancelled() || contains('success,failure', steps.dependency_scan.outcome) }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: dependency_scan
          message-path: osv_report.md
      
      - name: Upload Dependency scan JSON report artifact
        if: ${{ !cancelled() || contains('success,failure', steps.dependency_scan.outcome) }}
        uses: actions/upload-artifact@v4
        with:
          name: dependency_scan
          path: |
            osv_raw_report.json
            osv_raw_report.md

