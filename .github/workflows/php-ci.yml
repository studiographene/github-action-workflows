name: Studiographene PhP CI

on:
  workflow_call:
    inputs:
      excluded_jobs:
        type: string
        default: ""
      dockerfile_paths:
        description: "For container scan. Set of separated Dockerfile paths. Useful when you want scan Dockerfile in selected directories. Example: [./apps/users/Dockerfile, ./apps/account/Dockerfile]"
        type: string
        required: false
        default: ""
      docker_build_command:
        type: string
        required: false
        default: ""
      docker_build_image_id:
        description: "Docker image ID as mentioned in docker_build_command"
        type: string
        default: "local:latest"
      container_scanners:
        description: "comma-separated list of what security issues to detect (vuln,secret,config). Default = vuln"
        type: string
        required: false
        default: vuln
      container_scan_skip_dirs:
        description: "Comma separated list of directories to skip scanning"
        type: string
        required: false
      allowedLicenses:
        type: string
        required: false
        description: "`allowedLicenses` input is deprecated, and not used anymore. You can set allowed licenses using `ALLOWED_LICENSES` in GitHub action variables in UI."
      semgrep_options:
        type: string
        default: ""
      PR_TITLE_TYPE:
        description: "PR Title conventional types. For multiple types, use pipe | to separate without any space since, it is a regex. Example= feat|fix|hotfix"
        type: string
        required: false
        default: "feat|fix|build|chore|ci|docs|refactor|revert|style|test"
      JIRA_PROJECT_PR_TITLE_SCOPE:
        description: "OPTIONAL. Jira project abbreviation as seen in Jira tickets. For PR conventional title scope."
        type: string
        required: false
        default: "A-Za-z"
      container_scan_before_step_command:
        type: string
        default: ""
      container_scan_after_step_command:
        type: string
        default: ""
      security_scan_before_step_command:
        type: string
        default: ""
      security_scan_after_step_command:
        type: string
        default: ""

jobs:

  container_scan:
    name: container_scan
    if: ${{ !contains( inputs.excluded_jobs, 'docker' ) && !contains( inputs.excluded_jobs, 'container_scan' ) && !(contains(fromJSON('["dependabot[bot]", "github-actions[bot]"]'), github.actor)) }}
    uses: studiographene/github-action-workflows/.github/workflows/trivy-container-scan.yml@feat/ENB-83/split-jobs
    secrets: inherit
    with:
      docker_build_command: ${{ inputs.docker_build_command }}
      docker_build_image_id: ${{ inputs.docker_build_image_id }}
      container_scanners: ${{ inputs.container_scanners }}
      container_scan_skip_dirs: ${{ inputs.container_scan_skip_dirs }}
      dockerfile_paths: ${{ inputs.dockerfile_paths}}
      before_step_command: ${{ inputs.container_scan_before_step_command }}
      after_step_command: ${{ inputs.container_scan_after_step_command}}

  security_scans:
    name: security_scans
    if: ${{ !(contains(fromJSON('["github-actions[bot]", "dependabot[bot]"]'), github.actor)) && (github.event_name != 'issue_comment') }}
    uses: studiographene/github-action-workflows/.github/workflows/security-scans.yml@master
    secrets: inherit
    with:
      security_scan_before_step_command: ${{ inputs.security_scan_before_step_command }}
      security_scan_after_step_command: ${{ inputs.security_scan_after_step_command }}
      excluded_jobs: ${{ inputs.excluded_jobs }}
      semgrep_options: ${{ inputs.semgrep_options }}

  pr_check:
    name: pr_check
    runs-on: ${{ inputs.caching_job_runner }}
    permissions:
      contents: read
      pull-requests: write
    env:
      PR_TITLE_TYPE: ${{ inputs.PR_TITLE_TYPE }}
      JIRA_PROJECT_PR_TITLE_SCOPE: ${{ inputs.JIRA_PROJECT_PR_TITLE_SCOPE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: PR Conventional Title check
        id: pr_title_check
        run: |
          echo "PR_TITLE: ${{ github.event.pull_request.title }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Regex pattern
          PATTERN='^("${PR_TITLE_TYPE}")(\([${JIRA_PROJECT_PR_TITLE_SCOPE}\-]+[0-9]+\))(!)?:\s?.+$'
          if [[ ! "$PR_TITLE" =~ $PATTERN ]]; then
            echo "::error::❌ Invalid PR title format. Expected format: <type>(<JIRA-TICKET>): <description>. Example: feat(ABC-123): add login functionality"
            exit 1
          else
            echo "✅ PR title format is valid."
          fi
      - name: Comment the PR Title check result on to PR
        if: ${{ !cancelled() || contains('success,failure', steps.pr_title_check.outcome) }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: dependency_scan
          message: |
            ### ❌ Invalid PR title format
            Expected format: \<type\>(\<JIRA-TICKET\>): \<description\>. Example: feat(ABC-123): add login functionality